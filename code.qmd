---
title: "Investigating Factors Influencing Academic Achievement in English Towns"
author: "Zakk Heile & Julia Healey-Parera"
format: pdf
---

```{r}

library(MASS)
library(tidyverse)
library(broom)
library(glm2)
library(dplyr)
library(Stat2Data)
library(pROC)
library(yardstick)
library(ggplot2)
library(janitor)
library(here)
library(fs)
library(withr)
library(lmtest)

#edu <- read.csv("data/english_education.csv")
edu <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-23/english_education.csv')



working_dir <- here::here("data")

xls_path <- withr::local_tempfile(fileext = ".xlsx")
download.file(
  "https://www.ons.gov.uk/file?uri=/peoplepopulationandcommunity/educationandchildcare/datasets/educationalattainmentofyoungpeopleinenglishtownsdata/200708201819/youngpeoplesattainmentintownsreferencetable1.xlsx",
  xls_path,
  mode = "wb"
)

english_education <- readxl::read_xlsx(xls_path, sheet = "Data", na = "*") |> 
  janitor::clean_names()

readr::write_csv(
  english_education,
  fs::path(working_dir, "english_education.csv"))
```

```{r}
# bc <- boxcox(lm(highest_level_qualification_achieved_b_age_22_average_score ~ population_2011, data = english_education))
# lambda <- bc$x[which.max(bc$y)]
# english_education$population_2011_bc <- (english_education$population_2011^lambda - 1) / lambda

# level4qual_residents35_64_2011
# activity_at_age_19_full_time_higher_education
# activity_at_age_19_appprenticeships

english_education$rgn11nm <- as.character(english_education$rgn11nm)

english_education$rgn11nm_combined <- "Other"

#Combining regions where it makes sense geographically
english_education$rgn11nm_combined[english_education$rgn11nm %in% c("South East", "South West")] <- "South"
english_education$rgn11nm_combined[english_education$rgn11nm == "North East"] <- "North East"
english_education$rgn11nm_combined[english_education$rgn11nm == "North West"] <- "North West"

english_education$rgn11nm_combined <- factor(english_education$rgn11nm_combined)
english_education$rgn11nm_combined <- factor(english_education$rgn11nm_combined)

#Baseline
english_education$rgn11nm_combined <- relevel(english_education$rgn11nm_combined, ref = "South")

#Final model that includes an interaction term
m1 <- lm(
  highest_level_qualification_achieved_b_age_22_average_score	~ 
    level4qual_residents35_64_2011*level_3_at_age_18 +
    activity_at_age_19_full_time_higher_education +
    level4qual_residents35_64_2011 +
    rgn11nm_combined + 
    level_3_at_age_18	+ 
    key_stage_4_attainment_school_year_2012_to_2013, 
  data = english_education
  )
summary(m1)
```

```{r}


#transforming to log odds
#english_education <- english_education %>%
#  mutate(log_odds_ks4asy = log(key_stage_4_attainment_school_year_2012_to_2013 / (1 #- key_stage_4_attainment_school_year_2012_to_2013)))

#m1 <- lm(education_score ~ population_2011, data = english_education)

#summary(m1)

#m1 <- lm(education_score ~  factor(size_flag), data = english_education)

#summary(m1)

#better option - population_2011
#m1 <- lm(education_score ~  factor(size_flag)+factor(university_flag)+factor###(job_density_flag)+highest_level_qualification_achieved_b_age_22_average_score+factor(rgn11nm), data = english_education)
#summary(m1)

#english_education <- na.omit(english_education) #complete case analysis for all variables, even those we aren't using. We want R's default complete case analysis, only for those variables we are working with.

english_education$rgn11nm <- as.character(english_education$rgn11nm)

english_education$rgn11nm_combined <- "Other"

english_education$rgn11nm_combined[english_education$rgn11nm %in% c("South East", "South West")] <- "South"
english_education$rgn11nm_combined[english_education$rgn11nm == "North East"] <- "North East"
english_education$rgn11nm_combined[english_education$rgn11nm == "North West"] <- "North West"

english_education$rgn11nm_combined <- factor(english_education$rgn11nm_combined)
english_education$rgn11nm_combined <- factor(english_education$rgn11nm_combined)

english_education$rgn11nm_combined <- relevel(english_education$rgn11nm_combined, ref = "South")


#Residual Plot
ggplot(m1, aes(x = .fitted, y = .resid)) + 
  geom_point() + 
  geom_hline(yintercept = 0, color = "darkred") + 
  labs(x = "Fitted (predicted) value", y = "Residual", title = "Linearity looks great except at endpoints, Constant variance looks sufficient") + 
  theme_bw()


m1_aug <- augment(m1)


#QQ Plot
ggplot(m1, aes(sample = .resid)) +
  stat_qq() + 
  stat_qq_line() + 
  theme_bw() + 
  labs(x = "Theoretical quantiles", 
       y = "Sample quantiles", title = "Slight deviations but very reasonably normal")

#Our custom method of assessing constant variance - splitting into even intervals, calculating variance of each, and comparing.
quantiles <- quantile(m1_aug$.fitted, probs = seq(0, 1, by = 0.2))

variance_intervals_df <- data.frame(interval = character(0), variance = numeric(0))

for (i in 1:(length(quantiles) - 1)) {
  subset_data <- m1_aug %>%
    filter(.fitted >= quantiles[i] & .fitted < quantiles[i + 1])
  
  interval_name <- paste(round(quantiles[i], 2), "-", round(quantiles[i + 1], 2), sep="")
  variance_value <- var(subset_data$.resid)
  
  variance_intervals_df <- rbind(variance_intervals_df, 
                           data.frame(interval=interval_name,
                           variance=variance_value))
}

print(variance_intervals_df)

#Formal test for constant variance
bptest_result <- bptest(m1)

print(bptest_result)

resid_mean <- mean(m1_aug$.resid, na.rm = TRUE)
resid_sd <- sd(m1_aug$.resid, na.rm = TRUE)

#Histogram compared to normal distribution
ggplot(m1_aug, aes(x = .resid)) + 
  geom_histogram(aes(y = ..density..), 
                 fill = "deepskyblue", color = "darkblue", bins = 30) + 
  stat_function(fun = dnorm, 
                args = list(mean = resid_mean, sd = resid_sd),
                color = "darkred", lwd = 2) +
  labs(x = "Residual", y = "Density", title = "Symmetric tails and great fit to normal distribution") + 
  theme_bw()


#transforming back
#predicted_log_odds <- predict(m1, type = "response")
#predicted_proportions <- exp(predicted_log_odds) / (1 + exp(predicted_log_odds))
```

```{r}
#Finding min and max values taken on by variables, columns of the datasaet.
min_max_education_score <- english_education %>%
  summarise(min_education_score = min(education_score, na.rm = TRUE),
            max_education_score = max(education_score, na.rm = TRUE))

min_max_population_2011 <- english_education %>%
  summarise(min_population_2011 = min(population_2011, na.rm = TRUE),
            max_population_2011 = max(population_2011, na.rm = TRUE))

min_max_highest_qualification <- english_education %>%
  summarise(min_highest_qualification = min(highest_level_qualification_achieved_b_age_22_average_score, na.rm = TRUE),
            max_highest_qualification = max(highest_level_qualification_achieved_b_age_22_average_score, na.rm = TRUE))

min_max_level_3_age_18 <- english_education %>%
  summarise(min_level_3_age_18 = min(level_3_at_age_18, na.rm = TRUE),
            max_level_3_age_18 = max(level_3_at_age_18, na.rm = TRUE))

min_max_activity_age_19 <- english_education %>%
  summarise(min_activity_age_19 = min(activity_at_age_19_employment_with_earnings_above_10_000, na.rm = TRUE),
            max_activity_age_19 = max(activity_at_age_19_employment_with_earnings_above_10_000, na.rm = TRUE))

min_max_key_stage_4 <- english_education %>%
  summarise(min_key_stage_4 = min(key_stage_4_attainment_school_year_2012_to_2013, na.rm = TRUE),
            max_key_stage_4 = max(key_stage_4_attainment_school_year_2012_to_2013, na.rm = TRUE))

min_max_df <- bind_rows(
  min_max_education_score,
  min_max_population_2011,
  min_max_highest_qualification,
  min_max_level_3_age_18,
  min_max_activity_age_19,
  min_max_key_stage_4
)

print(min_max_df)
```

```{r}
edu_pairs <- english_education |> 
  select(
    activity_at_age_19_full_time_higher_education,
    highest_level_qualification_achieved_b_age_22_average_score,
    level_3_at_age_18, 
    key_stage_4_attainment_school_year_2012_to_2013) |> 
  mutate()

pairs(edu_pairs[, 1:4], main = "Pairs Plot of Iris Data")

ggplot(english_education, aes(x = factor(rgn11nm_combined))) +
  geom_bar() +
  labs(x = "Region (rgn11nm_combined)", y = "Count", title = "Relative Distributions of New Regions")
  
```
